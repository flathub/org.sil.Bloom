diff --git a/lib/BloomPdfMaker.sh b/lib/BloomPdfMaker.sh
index 446fe59d6..7ec718ac7 100755
--- a/lib/BloomPdfMaker.sh
+++ b/lib/BloomPdfMaker.sh
@@ -7,7 +7,7 @@
 LIB="$(dirname $0)"
 BASE="$(dirname $LIB)"
 
-if [ "$BASE" = "/usr/lib" ];
+if [ "$BASE" = "/usr/lib" -o "$BASE" = "/app/lib" ];
 then
     RUNMODE=INSTALLED
     SHARE=$(echo $LIB | sed s=/lib/=/share/=)
@@ -16,11 +16,11 @@ else
     SHARE=$(dirname $BASE)
 fi
 
-# This information may help if something goes wrong...
-echo BloomPdfMaker.sh: LIB=$LIB, BASE=$BASE, SHARE=$SHARE, RUNMODE=$RUNMODE
-
 cd "$SHARE"
 . ./environ
 cd "$OLDPWD"
 
-exec /opt/mono5-sil/bin/mono --debug "$LIB/BloomPdfMaker.exe" "$@"
+# This information may help if something goes wrong...
+echo BloomPdfMaker.sh: LIB=$LIB, BASE=$BASE, SHARE=$SHARE, RUNMODE=$RUNMODE, MONO_PREFIX=$MONO_PREFIX
+
+exec "$MONO_PREFIX/bin/mono" --debug "$LIB/BloomPdfMaker.exe" "$@"
diff --git a/src/BloomBrowserUI/teamCollection/TeamCollectionBookStatusPanel.tsx b/src/BloomBrowserUI/teamCollection/TeamCollectionBookStatusPanel.tsx
index c6de062c6..2f4860b55 100644
--- a/src/BloomBrowserUI/teamCollection/TeamCollectionBookStatusPanel.tsx
+++ b/src/BloomBrowserUI/teamCollection/TeamCollectionBookStatusPanel.tsx
@@ -58,7 +58,7 @@ export const TeamCollectionBookStatusPanel: React.FunctionComponent<IBookTeamCol
     const lockedByMe =
         props.who !== "" &&
         props.who === props.currentUser &&
-        props.where === props.currentMachine;
+        props.where.toLowerCase() === props.currentMachine.toLowerCase();
     const lockedByFullName = `${props.whoFirstName} ${props.whoSurname}`.trim();
     const lockedByDisplay =
         lockedByFullName !== "" ? lockedByFullName : props.who;
diff --git a/src/BloomExe/FatalExceptionHandler.cs b/src/BloomExe/FatalExceptionHandler.cs
index d1905d6eb..0e52b40da 100644
--- a/src/BloomExe/FatalExceptionHandler.cs
+++ b/src/BloomExe/FatalExceptionHandler.cs
@@ -72,6 +72,7 @@ protected void HandleTopLevelError(object sender, ThreadExceptionEventArgs e)
 			if (!GetShouldHandleException(sender, e.Exception))
 				return;
 
+			Console.Error.WriteLine("DEBUG FatalExceptionHandler.HandleTopLevelError({0}, {1}): exception={0}", sender, e.Exception);
 			if (UseFallback)
 			{
 				if (Program.RunningHarvesterMode)
@@ -102,6 +103,7 @@ protected new void HandleUnhandledException(object sender, UnhandledExceptionEve
 			if (!GetShouldHandleException(sender, e.ExceptionObject as Exception))
 				return;
 
+			Console.Error.WriteLine("DEBUG FatalExceptionHandler.HandleUnhandledException({0}, {1})", sender, e.ExceptionObject);
 			if (UseFallback)
 			{
 				if (Program.RunningHarvesterMode)
diff --git a/src/BloomExe/FontProcessing/FontMetadata.cs b/src/BloomExe/FontProcessing/FontMetadata.cs
index 836aad415..09b78092f 100644
--- a/src/BloomExe/FontProcessing/FontMetadata.cs
+++ b/src/BloomExe/FontProcessing/FontMetadata.cs
@@ -43,8 +43,8 @@ public class FontMetadata
 		/// On Window, we can use System.Windows.Media (which provides the GlyphTypeface class) to
 		/// provide all the font metadata information.
 		/// On Linux, we have to use Sharpfont from nuget (which provides the Sharpfont.Face class)
-		/// for reading the font's embedding flag plus running /usr/bin/otfino for everything else.
-		/// We get /usr/bin/otfinfo as part of the lcdf-typetools package that is specified in the
+		/// for reading the font's embedding flag plus running /app/bin/otfinfo for everything else.
+		/// We get /app/bin/otfinfo as part of the lcdf-typetools package that is specified in the
 		/// debian/control file.
 		/// </summary>
 		public FontMetadata(string fontName, FontGroup group)
@@ -133,7 +133,7 @@ public FontMetadata(string fontName, FontGroup group)
 				{
 					StartInfo = new ProcessStartInfo()
 					{
-						FileName = "/usr/bin/otfinfo",
+						FileName = "/app/bin/otfinfo",
 						Arguments = $"-i \"{group.Normal}\"",
 						UseShellExecute = false,
 						CreateNoWindow = true,
diff --git a/src/BloomExe/HelpLauncher.cs b/src/BloomExe/HelpLauncher.cs
index 02a8d6878..262018d0e 100644
--- a/src/BloomExe/HelpLauncher.cs
+++ b/src/BloomExe/HelpLauncher.cs
@@ -79,7 +79,7 @@ private static void ShowHelpWithTopic(Control parent, string helpFile, string he
 			{
 				arguments = String.Format("-showPage \"{0}\" \"{1}\"", helpTopic, helpFile);
 			}
-			else if (helpViewer == "xchm" || helpViewer == "/usr/bin/xchm")
+			else if (helpViewer == "xchm" || helpViewer == "/app/bin/xchm")
 			{
 				// According to the xchm developer, something like this should work:
 				// xchm file:jdk150.chm#xchm:/jdk150/api/java/applet/package-summary.html
diff --git a/src/BloomExe/ImageProcessing/ImageUtils.cs b/src/BloomExe/ImageProcessing/ImageUtils.cs
index b314b4617..0459e75eb 100644
--- a/src/BloomExe/ImageProcessing/ImageUtils.cs
+++ b/src/BloomExe/ImageProcessing/ImageUtils.cs
@@ -1029,7 +1029,7 @@ private static string GetGraphicsMagickPath()
 		{
 			if (Platform.IsLinux)
 			{
-				return "/usr/bin/gm";
+				return "/app/bin/gm";
 			}
 			else
 			{
diff --git a/src/BloomExe/NonFatalProblem.cs b/src/BloomExe/NonFatalProblem.cs
index b61b85a63..cebeda483 100644
--- a/src/BloomExe/NonFatalProblem.cs
+++ b/src/BloomExe/NonFatalProblem.cs
@@ -35,6 +35,7 @@ public class NonFatalProblem
 			Exception exception = null, bool showSendReport = true, bool isShortMessagePreEncoded = false, bool skipSentryReport = false, bool showRequestDetails = false,
 			string[] additionalFilesToInclude = null)
 		{
+			Console.Error.WriteLine("DEBUG NonFatalProblem.Report(\"{0}\", \"{1}\", {2})", shortUserLevelMessage, moreDetails, exception);
 			var originalException = exception;
 			s_expectedByUnitTest?.ProblemWasReported();
 
diff --git a/src/BloomExe/Program.cs b/src/BloomExe/Program.cs
index bf156b69b..8a2a83b26 100644
--- a/src/BloomExe/Program.cs
+++ b/src/BloomExe/Program.cs
@@ -308,7 +308,7 @@ static int Main(string[] args1)
 								using (var projectContext =
 									_applicationContainer.CreateProjectContext(fakeCollectionPath, true))
 								{
-									if (!UniqueToken.AcquireTokenQuietly(_mutexId))
+									if (!AcquireUniqueToken())
 									{
 										var msg = LocalizationManager.GetString("TeamCollection.QuitOtherBloom",
 											"Please close Bloom before joining a Team Collection");
@@ -362,7 +362,7 @@ static int Main(string[] args1)
 						Settings.Default.Save();
 
 						// and now we need to get the lock as usual before going on to load the new collection.
-						if (!UniqueToken.AcquireToken(_mutexId, "Bloom"))
+						if (!AcquireUniqueToken("Bloom"))
 							return 1;
 						gotUniqueToken = true;
 					}
@@ -372,7 +372,7 @@ static int Main(string[] args1)
 						HandleDownload(args[0]);
 						// If another instance is running, this one has served its purpose and can exit right away. Otherwise,
 						// carry on with starting up normally.  See https://silbloom.myjetbrains.com/youtrack/issue/BL-3822.
-						if (!UniqueToken.AcquireTokenQuietly(_mutexId))
+						if (!AcquireUniqueToken())
 							return 0;
 						gotUniqueToken = true;
 					}
@@ -388,7 +388,7 @@ static int Main(string[] args1)
 							// BloomLibrary starts a new Bloom process even when one is already running.  But that is taken care of in the
 							// other branch of this if/else.  So quit if we find another instance of Bloom running at this point.
 							// (A message will pop up to tell the user about this situation if it happens.)
-							if (!UniqueToken.AcquireToken(_mutexId, "Bloom"))
+							if (!AcquireUniqueToken("Bloom"))
 								return 1;
 						}
 						gotUniqueToken = true;
@@ -525,6 +525,61 @@ static int Main(string[] args1)
 			return 0;
 		}
 
+		private static bool AcquireUniqueToken(string progNameForMsg = null)
+		{
+			if (RobustFile.Exists(Path.Combine(Path.GetTempPath(), _mutexId + ".locktoken")) &&
+				SIL.PlatformUtilities.Platform.IsFlatpak)
+			{
+				// Try to open a communication channel to a possibly running Bloom.  We haven't started our
+				// server yet, so if we can talk, another Bloom is running.
+				using (var client = new System.Net.Http.HttpClient())
+				{
+					// Bloom tries to open port 8089 for serving, but tries up to ten consecutive ports
+					// if the port is already in use.  In practice, I don't remember ever seeing a port
+					// above 8091 being used.
+					var testResult = CheckForBloomOnHttp(client, 8089);
+					if (testResult != "OK")
+						testResult = CheckForBloomOnHttp(client, 8090);
+					if (testResult != "OK")
+						testResult = CheckForBloomOnHttp(client, 8091);
+					if (testResult == "OK")
+					{
+						// Simplified version of what libpalaso does in UniqueToken.AcquireToken().
+						if (!String.IsNullOrEmpty(progNameForMsg))
+						{
+							var errorMsg = String.Format(
+								L10NSharp.LocalizationManager.GetString("Application.AlreadyRunning.Specific",
+									"Another copy of {0} is already running. If you cannot find that copy of {0}, restart your computer.",
+									"{0} is the application name"),
+									progNameForMsg);
+							ErrorReport.NotifyUserOfProblem(errorMsg);
+						}
+						return false;
+					}
+				}
+			}
+			if (String.IsNullOrEmpty(progNameForMsg))
+				return UniqueToken.AcquireTokenQuietly(_mutexId);
+			else
+				return UniqueToken.AcquireToken(_mutexId, "Bloom");
+		}
+
+		private static string CheckForBloomOnHttp(System.Net.Http.HttpClient client, int port)
+		{
+			try
+			{
+				Api.BloomServer.portForHttp = port;
+				var task = System.Threading.Tasks.Task.Run(() => client.GetStringAsync(Api.BloomServer.ServerUrlWithBloomPrefixEndingInSlash + "testconnection"));
+				task.Wait(TimeSpan.FromSeconds(1)); // localhost should be fast
+				return task.Result;
+			}
+			catch (Exception e)
+			{
+				Console.WriteLine($"Checking for Bloom on port {port} caused the exception {e}");
+				return e.Message;
+			}
+		}
+
 		/// <summary>
 		/// Sets up different analytics channels depending on Debug or not.
 		/// Also determines whether or not Registration should occur.
@@ -659,7 +714,7 @@ public static void RestartBloom(bool hardExit, string args = null)
 				{
 					// This is needed until the day comes (if it ever does) when we can use the
 					// system mono on Linux.
-					program = "/opt/mono5-sil/bin/mono";
+					program = "/app/bin/mono";
 					if (args == null)
 						args = "\"" + Application.ExecutablePath + "\"";
 					else
diff --git a/src/BloomExe/Publish/Android/BloomPubMaker.cs b/src/BloomExe/Publish/Android/BloomPubMaker.cs
index 32e03335a..385942363 100644
--- a/src/BloomExe/Publish/Android/BloomPubMaker.cs
+++ b/src/BloomExe/Publish/Android/BloomPubMaker.cs
@@ -33,6 +33,8 @@ public static class BloomPubMaker
 
 		public static Control ControlForInvoke { get; set; }
 
+		static PublishHelper _publishHelper = null;
+
 		public static void CreateBloomPub(BookInfo bookInfo, AndroidPublishSettings settings, string outputFolder, BookServer bookServer, IWebSocketProgress progress )
 		{
 			var outputPath = Path.Combine(outputFolder, Path.GetFileName(bookInfo.FolderPath) + BookCompressor.BloomPubExtensionWithDot);
@@ -159,15 +161,16 @@ public static void CreateBloomPub(string outputPath, Book.Book book, BookServer
 
 			// Do this after processing interactive pages, as they can satisfy the criteria for being 'blank'
 			HashSet<string> fontsUsed = null;
-			using (var helper = new PublishHelper())
+			if (_publishHelper == null)
+				_publishHelper = new PublishHelper();
 			{
-				helper.ControlForInvoke = ControlForInvoke;
+				_publishHelper.ControlForInvoke = ControlForInvoke;
 				ISet<string> warningMessages = new HashSet<string>();
-				helper.RemoveUnwantedContent(modifiedBook.OurHtmlDom, modifiedBook, false,
+				_publishHelper.RemoveUnwantedContent(modifiedBook.OurHtmlDom, modifiedBook, false,
 					warningMessages, keepPageLabels:settings?.WantPageLabels??false);
 				PublishHelper.SendBatchedWarningMessagesToProgress(warningMessages, progress);
-				fontsUsed = helper.FontsUsed;
-				BloomPubFontsAndLangsUsed = helper.FontsAndLangsUsed;
+				fontsUsed = _publishHelper.FontsUsed;
+				BloomPubFontsAndLangsUsed = _publishHelper.FontsAndLangsUsed;
 			}
 			if (!modifiedBook.IsTemplateBook)
 				modifiedBook.RemoveBlankPages(settings?.LanguagesToInclude);
diff --git a/src/BloomExe/Publish/BloomLibrary/BloomLibraryUploadControl.cs b/src/BloomExe/Publish/BloomLibrary/BloomLibraryUploadControl.cs
index 1bcc66d43..adac0afdc 100644
--- a/src/BloomExe/Publish/BloomLibrary/BloomLibraryUploadControl.cs
+++ b/src/BloomExe/Publish/BloomLibrary/BloomLibraryUploadControl.cs
@@ -879,7 +879,7 @@ private void BulkUpload(string rootFolderPath)
 			var bloom = Application.ExecutablePath;
 			var command = $"\"{bloom}\" upload \"{rootFolderPath}\" -u {_userId.Text} -d {target}";
 			if (SIL.PlatformUtilities.Platform.IsLinux)
-				command = $"/opt/mono5-sil/bin/mono {command}";
+				command = $"/app/bin/mono {command}";
 
 			ProcessStartInfo startInfo;
 			if (SIL.PlatformUtilities.Platform.IsWindows)
@@ -947,29 +947,29 @@ private string GetLinuxTerminalProgramAndAdjustCommand(ref string command)
 		{
 			// See https://askubuntu.com/questions/484993/run-command-on-anothernew-terminal-window
 
-			if (RobustFile.Exists("/usr/bin/gnome-terminal"))	// standard for GNOME (Ubuntu/Wasta)
+			if (RobustFile.Exists("/app/bin/gnome-terminal"))	// standard for GNOME (Ubuntu/Wasta)
 			{
-				// /usr/bin/gnome-terminal -- /bin/bash -c "bloom upload \"folder\" -u user -d dest; read line"
-				command = $"-- /bin/bash -c \"{QuoteQuotes(command)}; read line\"";
-				return "/usr/bin/gnome-terminal";
+				// /app/bin/gnome-terminal -- /usr/bin/bash -c "bloom upload \"folder\" -u user -d dest; read line"
+				command = $"-- /usr/bin/bash -c \"{QuoteQuotes(command)}; read line\"";
+				return "/app/bin/gnome-terminal";
 			}
-			if (RobustFile.Exists("/usr/bin/terminator")) // popular alternative
+			if (RobustFile.Exists("/app/bin/terminator")) // popular alternative
 			{
-				// /usr/bin/terminator -x /bin/bash -c "bloom upload \"folder\" -u user -d dest; read line"
+				// /app/bin/terminator -x /bin/bash -c "bloom upload \"folder\" -u user -d dest; read line"
 				command = $"-x /bin/bash -c \"{QuoteQuotes(command)}; read line\"";
-				return "/usr/bin/terminator";
+				return "/app/bin/terminator";
 			}
-			if (RobustFile.Exists("/usr/bin/xfce4-terminal"))    // standard for XFCE4 (XUbuntu)
+			if (RobustFile.Exists("/app/bin/xfce4-terminal"))    // standard for XFCE4 (XUbuntu)
 			{
-				// /usr/bin/xterm -hold -x /bin/bash -c "bloom upload \"folder\" -u user -d dest"
+				// /app/bin/xterm -hold -x /bin/bash -c "bloom upload \"folder\" -u user -d dest"
 				command = $"-T \"Bloom upload\" --hold -x /bin/bash -c \"{QuoteQuotes(command)}\"";
-				return "/usr/bin/xfce4-terminal";
+				return "/app/bin/xfce4-terminal";
 			}
-			if (RobustFile.Exists("/usr/bin/xterm"))	// antique original (slightly better than nothing)
+			if (RobustFile.Exists("/app/bin/xterm"))	// antique original (slightly better than nothing)
 			{
-				// /usr/bin/xterm -hold -x /bin/bash -c "bloom upload \"folder\" -u user -d dest"
-				command = $"-T \"Bloom upload\" -hold -e /bin/bash -c \"{QuoteQuotes(command)}\"";
-				return "/usr/bin/xterm";
+				// /app/bin/xterm -hold -x /bin/bash -c "bloom upload \"folder\" -u user -d dest"
+				command = $"-T \"Bloom upload\" -hold -fa 'Monospace' -fs 14 -e /bin/bash -c \"{QuoteQuotes(command)}\"";
+				return "/app/bin/xterm";
 			}
 			// Neither konsole nor qterminal will launch with Bloom.  The ones above have been tested on Wasta 20.
 			// symbol lookup error: /usr/lib/x86_64-linux-gnu/qt5/plugins/styles/libqgtk2style.so: undefined symbol: gtk_combo_box_entry_new
diff --git a/src/BloomExe/Publish/PDF/PdfViewer.cs b/src/BloomExe/Publish/PDF/PdfViewer.cs
index 607b0f857..874747011 100644
--- a/src/BloomExe/Publish/PDF/PdfViewer.cs
+++ b/src/BloomExe/Publish/PDF/PdfViewer.cs
@@ -276,7 +276,7 @@ private bool TryGhostcriptPrint()
 			// setup in Ubuntu.  It handles PDF automatically.  gtklp is a graphical
 			// front end to the printer service that allows the user to specify the
 			// printer, paper size, and other parameters that may need to be tweaked.
-			var exePath = "/usr/bin/gtklp";
+			var exePath = "/app/bin/gtklp";
 			systemSpecificArgs = "";
 #else
 			var gsKey = Registry.LocalMachine.OpenSubKey(@"Software\GPL Ghostscript");
@@ -388,6 +388,9 @@ public void BrowserPrint()
 				}
 				finally {
 					Marshal.ReleaseComObject (print);
+#if __MonoCS__
+					PrintFinished?.Invoke(this, new EventArgs());
+#endif
 				}
 			}
 		}
diff --git a/src/BloomExe/Publish/PDF/ProcessPdfWithGhostscript.cs b/src/BloomExe/Publish/PDF/ProcessPdfWithGhostscript.cs
index f687a8604..1b9719144 100644
--- a/src/BloomExe/Publish/PDF/ProcessPdfWithGhostscript.cs
+++ b/src/BloomExe/Publish/PDF/ProcessPdfWithGhostscript.cs
@@ -47,7 +47,7 @@ public void ProcessPdfFile(string inputFile, string outputFile, bool removeEvenP
 		{
 			_inputPdfPath = inputFile;
 			_outputPdfPath = outputFile;
-			var exePath = "/usr/bin/gs";
+			var exePath = "/app/bin/gs";
 			if (SIL.PlatformUtilities.Platform.IsWindows)
 				exePath = FindGhostcriptOnWindows();
 			if (!String.IsNullOrWhiteSpace(exePath) && File.Exists(exePath))
diff --git a/src/BloomExe/Publish/PublishModel.cs b/src/BloomExe/Publish/PublishModel.cs
index a1ad96121..ac5940498 100644
--- a/src/BloomExe/Publish/PublishModel.cs
+++ b/src/BloomExe/Publish/PublishModel.cs
@@ -300,8 +300,9 @@ internal DisplayModes DisplayMode
 			set
 			{
 				_currentDisplayMode = value;
-				if (View != null)
-					View.Invoke((Action) (() => View.SetDisplayMode(value)));
+				//if (View != null)
+					//View.Invoke((Action)(() => View.SetDisplayMode(value)));
+				View.SetDisplayMode(value);
 			}
 		}
 
diff --git a/src/BloomExe/Utils/MiscUtils.cs b/src/BloomExe/Utils/MiscUtils.cs
index 018dc97f8..09f7faebe 100644
--- a/src/BloomExe/Utils/MiscUtils.cs
+++ b/src/BloomExe/Utils/MiscUtils.cs
@@ -237,7 +237,7 @@ public static string ColorToHtmlCode(Color color)
 		/// <returns></returns>
 		public static string FindFfmpegProgram()
 		{
-			var ffmpeg = "/usr/bin/ffmpeg";     // standard Linux location
+			var ffmpeg = "/app/bin/ffmpeg";     // standard Linux location
 			if (SIL.PlatformUtilities.Platform.IsWindows)
 				ffmpeg = Path.Combine(BloomFileLocator.GetCodeBaseFolder(), "ffmpeg.exe");
 			return RobustFile.Exists(ffmpeg) ? ffmpeg : string.Empty;
@@ -483,7 +483,7 @@ public static TimeSpan GetMp3TimeSpan(string path, bool throwOnInvalidData = fal
 				// A short file may have only one carriage-return separated section of output, while a very long file may
 				// have more sections than this.
 				var args = String.Format("-v quiet -stats -i \"{0}\" -f null -", path);
-				var result = CommandLineRunner.Run("/usr/bin/ffmpeg", args, "", 20 * 10, new SIL.Progress.NullProgress());
+				var result = CommandLineRunner.Run("/app/bin/ffmpeg", args, "", 20 * 10, new SIL.Progress.NullProgress());
 				var output = result.ExitCode == 0 ? result.StandardError : null;
 				string timeString = null;
 				if (!string.IsNullOrEmpty(output))
diff --git a/src/BloomExe/web/controllers/AudioSegmentationApi.cs b/src/BloomExe/web/controllers/AudioSegmentationApi.cs
index d4ae7d9ac..2fe041ef4 100644
--- a/src/BloomExe/web/controllers/AudioSegmentationApi.cs
+++ b/src/BloomExe/web/controllers/AudioSegmentationApi.cs
@@ -112,7 +112,9 @@ public bool AreAutoSegmentDependenciesMet(out string message)
 			string workingDir = Platform.IsLinux ? "/tmp" : kWorkingDirectory;
 			string stdout;
 			var findPythonCommand = $"{locateCmd} python";
-			if (Platform.IsLinux && !DoesCommandCauseError("/usr/bin/lsb_release -r", out stdout, workingDir))
+			if (Platform.IsFlatpak)
+				findPythonCommand = $"{locateCmd} python3";
+			else if (Platform.IsLinux && !DoesCommandCauseError("/usr/bin/lsb_release -r", out stdout, workingDir))
 			{
 				// Ubuntu 20.04 installs python3 by default without any /usr/bin/python, and python3-aeneas is
 				// installed instead of python-aeneas (which depends on python2.7).
@@ -434,11 +436,12 @@ private string GetBestSupportedLanguage(string requestedLangCode, out string std
 
 				return "eo";
 			}
+			string workingDir = Platform.IsLinux ? "/tmp" : kWorkingDirectory;
 
 			// First try the requested langauge directly.
 			// (We need to test eSpeak directly instead of Aeneas because when using TTS overrides, there's no Aeneas error message that tells us if the language is unsupported.
 			// Therefore, we explicitly test if the language is supported by the dependency (eSpeak) before getting started.
-			if (!DoesCommandCauseError($"espeak -v {requestedLangCode} -q \"hello world\"", kWorkingDirectory, out stdOut, out stdErr))
+			if (!DoesCommandCauseError($"espeak -v {requestedLangCode} -q \"hello world\"", workingDir, out stdOut, out stdErr))
 			{
 				return requestedLangCode;
 			}
@@ -470,7 +473,7 @@ private string GetBestSupportedLanguage(string requestedLangCode, out string std
 			string langCode = null;
 			foreach (var langCodeToTry in potentialFallbackLangs)
 			{
-				if (!DoesCommandCauseError($"espeak -v {langCodeToTry} -q \"hello world\"", kWorkingDirectory, out stdOut, out stdErr))
+				if (!DoesCommandCauseError($"espeak -v {langCodeToTry} -q \"hello world\"", workingDir, out stdOut, out stdErr))
 				{
 					langCode = langCodeToTry;
 					break;
